# buildspec file version
version: 0.2

env:
  secrets-manager:
    DOCKERHUB_TOKEN: "docker:token"
    DOCKERHUB_USERNAME: "docker:username"
    REPO_DOMAIN: "course-management-api/prod:ECR_REPO_DOMAIN"
    REPO_URI: "course-management-api/prod:ECR_REPO_URI"
phases:
  install:
    runtime-versions:
      nodejs: 18.x
    commands:
      - echo Install phase started.
      - echo "Node.js version:" $(node -v)
      - echo "npm version:" $(npm -v)
      # - npm install -g npm
      - npm install -g @nestjs/cli
      - npm ci
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 & timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo Install phase completed.
  pre_build:
    commands:
      - echo Pre-Build phase started.
      - echo "Node.js version:" $(node -v)

      # It is necessary to avoid Docker's pull limitation.
      - echo log in into Docker hub.
      - echo $DOCKERHUB_TOKEN | docker login --username $DOCKERHUB_USERNAME --password-stdin

      - echo log in to Amazon ECR...
      - aws --version
      - echo "default region:" $AWS_DEFAULT_REGION
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPO_DOMAIN

      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)

      # - IMAGE_TAG_PROD="${COMMIT_HASH}-prod"
      - IMAGE_TAG_PROD="latest"
      - IMAGE_TAG_TESTING="${COMMIT_HASH}-testing"

      - echo Pre-Build phase completed.
  build:
    commands:
      - echo Build phase started on `date`.

      - npm run build
      - echo nest build phase completed.

      - echo Building the Docker image.
      - echo tag $REPO_URI:$IMAGE_TAG_PROD

      - docker build --target production -t $REPO_URI:IMAGE_TAG_PROD .
      - docker tag $REPO_URI:IMAGE_TAG_PROD $REPO_URI:$IMAGE_TAG_PROD

      - docker build --target testing -t $REPO_URI:IMAGE_TAG_TESTING .
      - docker tag $REPO_URI:IMAGE_TAG_TESTING $REPO_URI:$IMAGE_TAG_TESTING

      - echo Building the Docker image complited.
  post_build:
    commands:
      - echo Build completed on `date`

      - docker push $REPO_URI:$IMAGE_TAG_PROD
      - docker push $REPO_URI:$IMAGE_TAG_TESTING

      - echo write definitions file...
      - printf '[{"name":"course-management-api","imageUri":"%s"}]' $REPO_URI:$IMAGE_TAG_PROD > imagedefinitions.json

artifacts:
  files: imagedefinitions.json

